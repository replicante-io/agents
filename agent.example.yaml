# Datastore independent agent configuration.
agent:
  # The section below is for the API interface configuration.
  api:
    # The network interface and port to bind the API server onto.
    #
    # By default, only bind to the loopback interface.
    # Production environments should place an HTTPS proxy in front of the API.
    bind: '127.0.0.1:8000'

    # Enable/disable entire API trees.
    #
    # Useful for advanced operators that which to control access to experimental or legacy
    # API versions or reduce attack surfices by removing endpoints that are not needed.
    #
    # Example use cases are:
    #
    #   * Upgrade prep: testing new API versions while having a quick rollback plan.
    #   * Controlled rollout: be prepared for when verions are no longer supported.
    #   * Disable unstable/experimental APIs: to enusre integrated tools only use stable APIs.
    trees:
      # Enable/disable the introspection APIs.
      #
      # The introspection API is very usesul to gain insight into the system.
      # It can also be used to monitor the system for failures or performance degradation.
      introspect: true

      # Enable/disable the unstable APIs.
      #
      # The unstable APIs are for endpoints in the early development cycle
      # where the attributes and parameters can change a lot and often.
      unstable: true

  # Override the cluster display name, or set it if none was detected.
  #
  # The cluster ID is used to uniquely identify the cluster across the system
  # but some datastores report random, machine generated, strings as IDs.
  # To make clusters more identifiable to Replicante users a display name is
  # used in messages/views when provided, using the cluster ID as a fallback.
  #
  # When a datastore does not auto-detect a display name or you wish to change the
  # auto-detected display name, use this field to set whatever you want.
  #
  # NOTE: just like the cluster ID, the display name must be unique across all
  # clusters in a single Replicante Core instance.
  cluster_display_name_override: ~

  # The section below is for logging configuration.
  logging:
    # Flush logs asynchronously.
    # 
    # Pro:
    #     Async log flushing is more efficient as processes
    #     are not blocked waiting for logging backends to complete.
    # 
    # Con:
    #     If the process crashes logs in the buffer may be lost.
    #
    # Recommendation:
    #     Keep async logging enabled unless replicante is crashing
    #     and the logs don't have any indications of why.
    #
    #     Async logging may also be disabled in testing, debugging,
    #     or developing environments.
    async: true

    # Logging backend configuration.
    backend:
      # The backend to send logs to.
      # This option also determines the format and destination of logs.
      #
      # Available options:
      #
      #   * 'json': prints JSON formatted logs to standard output.
      #   * 'journald': sends logs to systemd journal (if enabled at compile time).
      name: json

      # Any backend-specific option is set here.
      # The available options vary from backend to backend and are documented below.
      #
      # *** None available at this time ***
      #options:

    # The minimum logging level.
    #
    # Available options:
    #
    #   * 'critical'
    #   * 'error'
    #   * 'warning'
    #   * 'info'
    #   * 'debug' (only available in debug builds)
    level: info


  # The section below is for distributed tracing configuration.
  tracing:
    # The distributed tracing backend to integrate with.
    #
    # Available options:
    #
    #   * 'noop'
    #   * 'zipkin'
    backend: noop

    # Any backend-specific option is set here.
    # The available options vary from tracer to tracer and are documented below.
    #
    # Zipkin options
    #options:
    #  # (required) The service name for this zipkin endpoint.
    #  service_name: replicante
    #
    #  # (required) List of kafka seed hostnames.
    #  kafka:
    #    - HOST1:9092
    #    - HOST2:9092
    #
    #  # The kafka topic to publish spans to.
    #  topic: zipkin
